name: Deploy Bitcoin Trading Bot

on:
  push:
    branches: [master, main]  # master 또는 main 브랜치에 push시 실행
  pull_request:
    branches: [master, main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install

    - name: Code quality checks
      run: |
        # 코드 포맷팅 검사
        echo "🔍 Checking import sorting..."
        poetry run isort --check-only *.py
        
        echo "🔍 Checking code formatting..."
        poetry run black --check *.py
        
        echo "🔍 Running linter..."
        poetry run flake8 *.py
        
        echo "✅ All code quality checks passed!"

    - name: Configuration validation
      run: |
        echo "🔍 Validating configuration files..."
        poetry run python config_manager.py validate
        echo "✅ Configuration validation passed!"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install Python dependencies  
      run: |
        poetry install

    - name: Generate requirements.txt
      run: |
        echo "🔍 Attempting to generate requirements.txt..."
        if poetry self add poetry-plugin-export 2>/dev/null && poetry export --without-hashes -f requirements.txt -o requirements.txt 2>/dev/null; then
          echo "✅ Generated requirements.txt using Poetry export!"
        else
          echo "⚠️ Poetry export failed, using existing requirements.txt"
          echo "📋 Current requirements.txt contents:"
          cat requirements.txt
        fi

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install Node.js dependencies
      run: pnpm install --frozen-lockfile

    - name: Validate serverless configuration
      run: |
        echo "🔍 Validating serverless.yml..."
        npx serverless print --stage dev | head -20
        echo "✅ Serverless configuration validation passed!"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Install Serverless Framework
      run: |
        npm install -g serverless
        # pnpm으로 플러그인 설치
        pnpm install

    - name: Deploy to AWS Lambda
      env:
        BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
        BINANCE_SECRET: ${{ secrets.BINANCE_SECRET }}
      run: |
        echo "🚀 Starting deployment..."
        echo "📦 Deploying Bitcoin Trading Bot to AWS Lambda..."
        serverless deploy --stage dev --verbose
        echo "✅ Deployment completed successfully!"
        echo "🎯 Lambda function is now running and will execute every 5 minutes"

    - name: Post-deployment notification
      if: success()
      run: |
        echo "🎉 Bitcoin Trading Bot deployed successfully to AWS Lambda!"
        echo "📧 Don't forget to set up SNS email subscription for notifications"
        echo "📊 Monitor your bot at: https://console.aws.amazon.com/lambda/"
        
    - name: Deployment failure notification
      if: failure()
      run: |
        echo "❌ Deployment failed! Please check the logs above."
        echo "🔧 Common issues:"
        echo "  - Check AWS credentials in GitHub Secrets"
        echo "  - Verify IAM permissions"
        echo "  - Ensure Binance API keys are valid"
        echo "📚 See docs/DEPLOYMENT_GUIDE.md for troubleshooting" 